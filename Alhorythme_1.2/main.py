def binary_gcd(a, b):
    # Условие: b > a > 0
    if not (b > a > 0):
        raise ValueError("Условие b > a > 0 не выполнено")

    # Шаг 1: x = b, y = a, c = 1
    x = b  # x - текущее значение b
    y = a  # y - текущее значение a
    c = 1  # c - множитель для общих делителей 2

    print(f"Начальные значения: a = {a}, b = {b}")
    print(f"Шаг 1: x = {x}, y = {y}, c = {c}")

    # Шаг 2: Делим на 2 пока оба четные
    # Условие x % 2 == 0 и y % 2 == 0 проверяет делимость на 2 (оператор % возвращает остаток)
    while x % 2 == 0 and y % 2 == 0:
        x = x // 2
        y = y // 2
        c = c * 2
        print(f"Шаг 2: x = {x}, y = {y}, c = {c}")

    # Шаг 3: Приводим к равенству
    while x != y:
        if x % 2 == 0:  # Проверка, является ли x четным числом
            x = x // 2  # Если x четное, делим на 2, как указано в шаге 3.1
            print(f"Шаг 3.1: x = {x}")
        elif y % 2 == 0:    # Проверка, является ли y четным числом
            y = y // 2
            print(f"Шаг 3.2: y = {y}")
        elif x > y:
            diff = x - y
            if diff % 2 == 0:  # Проверяем, четная ли разность
                x = diff // 2  # Если четная, делим на 2, как в шаге 3.3
            else:
                x = diff  # Если нечетная, просто присваиваем разность
            print(f"Шаг 3.3: x = {x} (x > y, вычитаем y и делим на 2, если разность четная)")
        else:  # Если y > x
            diff = y - x
            if diff % 2 == 0:  # Проверяем, четная ли разность
                y = diff // 2  # Если четная, делим на 2, как в шаге 3.4
            else:
                y = diff  # Если нечетная, присваиваем разность
            print(f"Шаг 3.4: y = {y} (y > x, вычитаем x и делим на 2, если разность четная)")

    # Шаг 4: Вычисляем НОД
    result = c * x
    print(f"Шаг 4: НОД({a}, {b}) = {c} * {x} = {result}")
    return result

# Ввод данных
a = int(input("Введите число a: "))
b = int(input("Введите число b: "))
gcd_result = binary_gcd(a, b)
print(f"Итоговый НОД({a}, {b}) = {gcd_result}")