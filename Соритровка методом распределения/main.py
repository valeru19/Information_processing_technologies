# Реализация поразрядной сортировки (Radix Sort)
# Алгоритм сортирует целые числа, обрабатывая их цифры по разрядам (от младшего к старшему)

def counting_sort_for_radix(arr, exp, iteration):
    # Вспомогательная функция для сортировки подсчетом для каждого разряда
    # arr - входной массив
    # exp - текущий разряд (1, 10, 100 и т.д.)
    # iteration - номер итерации для вывода

    n = len(arr)
    output = [0] * n  # Временный массив для хранения отсортированных элементов
    count = [0] * 10  # Массив для подсчета частоты цифр (0-9)

    # Подсчет частоты каждой цифры в текущем разряде
    for i in range(n):
        index = (arr[i] // exp) % 10  # Извлекаем цифру в текущем разряде
        count[index] += 1

    # Накопление частот для определения позиций элементов
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Построение выходного массива, начиная с конца, чтобы сохранить стабильность
    i = n - 1
    while i >= 0:
        index = (arr[i] // exp) % 10
        output[count[index] - 1] = arr[i]
        count[index] -= 1
        i -= 1

    # Копирование отсортированного массива обратно в исходный
    for i in range(n):
        arr[i] = output[i]

    # Вывод состояния массива после текущей итерации
    print(f"Итерация {iteration} (разряд {exp}): {arr}")


def radix_sort(arr):
    # Основная функция поразрядной сортировки
    # arr - входной массив целых чисел (положительных)

    # Находим максимальное число, чтобы определить количество разрядов
    max_num = max(arr)

    # Проходим по каждому разряду, начиная с младшего (1, 10, 100...)
    exp = 1
    iteration = 1
    while max_num // exp > 0:
        counting_sort_for_radix(arr, exp, iteration)
        exp *= 10
        iteration += 1

    return arr


# Пример использования
if __name__ == "__main__":
    # Тестовый массив
    arr = [170, 45, 75, 90, 802, 24, 2, 66]
    print("Исходный массив:", arr)

    # Вызов сортировки
    sorted_arr = radix_sort(arr)
    print("Отсортированный массив:", sorted_arr)